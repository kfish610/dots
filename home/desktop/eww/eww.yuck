(defwindow bar
  :geometry (geometry
    :x "0%"
    :y "15px"
    :width "1890px"
    :height "45px"
    :anchor "top center"
  )
  
  :monitor 0
  :stacking "fg"
  :exclusive true
  :focusable "none"
  
  (centerbox
    :class "bar"
    :orientation "h"
    (left :monitor "eDP-1")
    (center)
    (right)
  )
)

(defwindow bar0
  :geometry (geometry
    :x "0%"
    :y "15px"
    :width "2530px"
    :height "45px"
    :anchor "top center"
  )
  
  :monitor 0
  :stacking "fg"
  :exclusive true
  :focusable "none"
  
  (centerbox
    :class "bar"
    :orientation "h"
    (left :monitor "DP-2")
    (center)
    (right)
  )
)

(defwindow bar1
  :geometry (geometry
    :x "0%"
    :y "15px"
    :width "1050px"
    :height "45px"
    :anchor "top center"
  )
  
  :monitor 1
  :stacking "fg"
  :exclusive true
  :focusable "none"
  
  (centerbox
    :class "bar"
    :orientation "h"
    (left :monitor "DP-4")
    (box)
    (right)
  )
)


(defwidget left [?monitor]
  (workspaces :monitor monitor)
)

(defwidget workspaces [?monitor]
  (eventbox :onscroll "niri msg action focus-workspace-{}"
    (box :class "workspaces" :space-evenly false
      (for i in `[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]`
        (button
          :onclick "niri msg action focus-workspace ${i}"
          :class {workspaces-json?.[monitor]?.[i]?.is_active ? "workspace-active" : ""}
          {workspaces-json?.[monitor]?.[i]?.active_window_id != "null" ? "" : ""}
        )
      )
    )
  )
)
(defpoll workspaces-json :interval "1s" "niri msg -j workspaces | jq 'group_by(.output) | map({key: .[0].output, value: (. | sort_by(.idx) | [null] + .)}) | from_entries'")


(defwidget center []
  (button
    :onclick "${EWW_CMD} open --toggle calendar"
    {formattime(EWW_TIME, "%a, %x @ %I:%M %p")}
  )
)


(defwindow calendar
  :geometry (geometry
    :x "0px"
    :y "15px"
    :anchor "top center"
  )
  
  :monitor 0
  :stacking "overlay"
  
  (box :class "calendar" (calendar))
)


(defwidget right []
  (box :class "right"
    :space-evenly false
    :halign "end"
    
    (box (systray) )
    (sep)
    (box
      (temp)
      (memory)
      (battery)
      (cpu)
      (disk)
    )
    (sep)
    (box (power))
  )
)

(defwidget temp []
  (circular
    :value {EWW_TEMPS.CORETEMP_PACKAGE_ID_0}
    :icon ""
    :class "temp"
    :tooltip "${round(EWW_TEMPS.CORETEMP_PACKAGE_ID_0, 0)}°C"
  )
)

(defwidget cpu []
  (circular
    :value {EWW_CPU.avg}
    :icon ""
    :class "cpu"
    :tooltip "${round(EWW_CPU.avg, 0)}% used"
  )
)

(defvar gib 1073741824)
(defwidget memory []
  (circular
    :value {EWW_RAM.used_mem_perc}
    :icon ""
    :xalign 0.55
    :class "memory"
    :tooltip "${round(EWW_RAM.used_mem/gib, 1)}/${round(EWW_RAM.total_mem/gib, 1)} GiB used"
  )
)

(defwidget disk []
  (circular
    :value {EWW_DISK["/"].used_perc}
    :icon ""
    :class "disk"
    :tooltip "${round(EWW_DISK['/'].used/gib, 0)}/${round(EWW_DISK['/'].total/gib, 0)} GiB used"
  )
)

(defwidget battery []
  (circular
    :value {EWW_BATTERY.BAT1.capacity}
    :icon "󰂎"
    :class "battery"
    :tooltip "${EWW_BATTERY.BAT1.capacity}% charged"
  )
)

(defwidget power []
  (button
    :onclick "systemctl poweroff"
    (label :class "power" :text "")
  )
)


(defwidget sep []
  (box :class "separator" "   ")
)

(defwidget circular [?value ?icon ?class ?tooltip ?xalign]
  (circular-progress
    :value {value}
    :class "progress-circle ${class}"
    :thickness 3
    (button
      :class "${class}"
      :tooltip {tooltip}
      (label :xalign {xalign} :text {icon})
    )
  )
)
