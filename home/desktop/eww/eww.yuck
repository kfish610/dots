(defwindow bar
  :geometry (geometry
    :x "0%"
    :y "15px"
    :width "1890px"
    :height "45px"
    :anchor "top center"
  )
  
  :monitor 0
  :stacking "fg"
  :exclusive true
  :focusable "none"
  
  (centerbox
    :class "bar"
    :orientation "h"
    (left)
    (center)
    (right)
  )
)


(defwidget left []
  (workspaces)
)

(defwidget workspaces []
  (eventbox :onscroll "hyprctl dispatch workspace `echo {} | sed 's/up/+/' | sed 's/down/-/'`1"
    (box :class "workspaces" :space-evenly false
      (for i in `[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]`
        (button
          :onclick "hyprctl dispatch workspace ${i}"
          :class "workspace-base ${workspaces-json?.[i]?.class}"
          {(workspaces-json?.[i]?.active ?: false) ? "" : ""}
        )
      )
    )
  )
)
(deflisten workspaces-json "hyprland-workspaces ALL | jq --unbuffered -c \". | map({ (.id|tostring): . }) | add\"")


(defwidget center []
  (button
    :onclick "${EWW_CMD} open --toggle calendar"
    {formattime(EWW_TIME, "%a, %x @ %I:%M %p")}
  )
)


(defwindow calendar
  :geometry (geometry
    :x "0px"
    :y "15px"
    :anchor "top center"
    :width "270px"
    :height "60px"
  )
  
  :monitor 0
  :stacking "overlay"
  (box :class "calendar"
    (calendar
      :day {formattime(EWW_TIME, "%d")}
      :month {formattime(EWW_TIME, "%m")}
      :year {formattime(EWW_TIME, "%Y")}
    )
  )
)


(defwidget right []
  (box :class "right"
    :halign "end"
    (temp)
    (memory)
    (battery)
    (cpu)
    (disk)
  )
)

(defwidget temp []
  (circular
    :value {EWW_TEMPS.CORETEMP_PACKAGE_ID_0}
    :icon ""
    :class "temp"
    :tooltip "${round(EWW_TEMPS.CORETEMP_PACKAGE_ID_0, 0)}°C"
  )
)

(defwidget cpu []
  (circular
    :value {EWW_CPU.avg}
    :icon ""
    :class "cpu"
    :tooltip "${round(EWW_CPU.avg, 0)}% used"
  )
)

(defvar gib 1073741824)
(defwidget memory []
  (circular
    :value {EWW_RAM.used_mem_perc}
    :icon ""
    :xalign 0.55
    :class "memory"
    :tooltip "${round(EWW_RAM.used_mem/gib, 1)}/${round(EWW_RAM.total_mem/gib, 1)} GiB used"
  )
)

(defwidget disk []
  (circular
    :value {EWW_DISK["/"].used_perc}
    :icon ""
    :class "disk"
    :tooltip "${round(EWW_DISK['/'].used/gib, 0)}/${round(EWW_DISK['/'].total/gib, 0)} GiB used"
  )
)

(defwidget battery []
  (circular
    :value {EWW_BATTERY.BAT1.capacity}
    :icon "󰂎"
    :class "battery"
    :tooltip "${EWW_BATTERY.BAT1.capacity}% charged"
  )
)


(defwidget circular [?value ?icon ?class ?tooltip ?xalign]
  (box
    (circular-progress
      :value {value}
      :class "progress-circle ${class}"
      :thickness 3
      (button
        :class "progress-icon ${class}"
        :tooltip {tooltip}
        (label :xalign {xalign} :text {icon})
      )
    )
  )
)